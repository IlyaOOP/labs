1. Что такое производный и базовый классы? 
Производный класс можно рассматривать как расширение существующего класса. Исходный класс называется базовым или родительским,

2. В чем заключена основная задача наследования?
описать новый класс на основе уже существующего (родительского),
 при этом свойства и функциональность родительского класса заимствуются новым классом.
 
3. Пусть базовый класс содержит метод basefunc(), а производный класс не имеет метода с таким именем. 
Может ли объект производного класса иметь доступ к методу basefunc()? Если да, то при каких условиях? 
производный класс может иметь доступ только к тем членам базового класса, которые определены с модификаторами 
public, internal, protected и protected internal.

4. Напишите объявление конструктора без аргументов для производного класса B, который будет вызывать конструктор без аргументов 
базового класса A. 
public class A
    {
        public A()
        {
            
        }
    }
    public class B : A
    {
        public B() : base()
        {
            
        }
    }

5. Что такое полиморфизм? Приведите пример. 
Получение разного поведения при неизменной точке вызова.
Рулевое колесо автомобиля. Оно работает одинаково, независимо от того,
 используется ли при этом электропривод, механический привод или стандартное ручное управление. 
Ключевым является то, что интерфейс (рулевое колесо) один и тот же, независимо от того,
 какой метод (рулевой механизм) применятся на самом деле

6. Определите назначение виртуальных функций. 
Те методы и свойства, которые мы хотим сделать доступными для переопределения, в базовом классе помечается модификатором virtual. 

7. Кому доступны переменные с модификатором protected? 
такой член класса доступен из любого места в текущем классе или в производных классах.

8. Наследуются ли переменные с модификатором private? 
Да, но они не являются доступными

9. As, is – что это, как применяется? 
as. С помощью него программа пытается преобразовать выражение к определенному типу, при этом не выбрасывает исключение. 
В случае неудачного преобразования выражение будет содержать значение null
Выражение person is Employee проверяет, является ли переменная person объектом типа Employee и возвращает значение bool

10. Поддерживает ли C# множественное наследование? 
no

11. Можно ли запретить наследование от класса? 
yes sealed

12. Можно ли разрешить наследование класса, но запретить перекрытие метода? 
Да. Указываем класс как public, а метод как sealed.

13. Что такое абстрактный класс? 
базовый класс, который не предполагает создания экземпляров

14. В каком случае вы обязаны объявить класс абстрактным? 
не предполагает создания экземпляров

15. В чем разница между абстрактными и виртуальными классами? Между виртуальными и абстрактными методами? 
Абстрактный класс это класс, содержащий хотя бы один метод (abstract)..
Виртуальный метод имеет реализацию и м.б. переопределен в производном классе. Абстрактный метод не имеет реализацию,
 только описание метода, который д.б. реализован в производных классах. 

16. Какие компоненты класса могут быть виртуальными? 
Виртуальными могут быть:
Методы
Свойства
Индексаторы
События

17. Что такое интерфейс? 
Интерфейс представляет ссылочный тип, который определяет набор методов и свойств, но не реализует их.

18. Как работать с объектом через унаследованный интерфейс? 
code bottom

19. Приведите пример явной реализации интерфейса. 
неявно реализован как: public void CopyTo(Array array, int index)
явно: void ICollection.CopyTo(Array array, int index)

20. Почему нельзя указать модификатор видимости для методов интерфейса? 
Потому что все они должны иметь модификатор public, который и установлен по умолчанию

21. Можно ли наследовать от нескольких интерфейсов?  
yes

22. Назовите отличия между интерфейсом и абстрактным классом. 
Интерфейс - такой же абстрактный класс,только в нем не может быть свойств и не определены тела у методов. 
Так же стоит заметить, что абстрактный класс наследуется(etxends), а интерфейс реализуется (implements). 
Вот и возникает разница между ними, что наследовать мы можем только 1 класс, а реализовать сколько угодно.

23. Для чего используются стандартные интерфейсы ICloneable, IComparable, IComparer, lEnumerable? 
ICloneable-создает полную копию объекта с новыми адресами(при присваивании одного объекта другому, передается ссылка и изменения второго объекта повлияют на первый)
IComparable int CompareTo(object o);, IComparer Compare(object o1, object o2); - сравнение объектов
lEnumerable - перебор элементов коллекции(реализация foreach для собственного типа)

24.2
25.3,4
26.АВ
27.1
28.2
29.3
30.2(override = !virtual)
31.4)класс абстрактный(
32.?
33.new G